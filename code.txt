#include <Keypad.h>
#include <Servo.h>
  Servo myservo;
  const byte rows = 4;
  const byte cols = 3;

  char key[rows][cols] = {
    {'1', '2', '3'},
    {'4', '5', '6'},
    {'7', '8', '9'},
    {'*', '0', '#'}
  };
  byte rowPins[rows] = {1, 2, 3, 4};
  byte colPins[cols] = {5, 6, 7};
  Keypad keypad = Keypad(makeKeymap(key), rowPins, colPins, rows, cols);
  char* password = "8888";
  int currentposition = 0;
  int redled = 10;
  int greenled = 11;
  int buzz = 8;
  int invalidcount = 12;
  int pos;
  void setup()
  {
    Serial.begin(9600);
    pinMode(redled, OUTPUT);
    pinMode(greenled, OUTPUT);
    pinMode(buzz, OUTPUT);
    myservo.attach(9); //SERVO ATTACHED//

  }

  void loop()
  {
    int l ;
    char code = keypad.getKey();
    if (code != NO_KEY)
    {
      for (l = 0; l <= currentposition; ++l)
      {
        keypress();
      }

      if (code == password[currentposition])
      {
        ++currentposition;
        if (currentposition == 4)
        {

          unlockdoor();
          currentposition = 0;

        }
      }
      else
      {
        ++invalidcount;
        incorrect();
        currentposition = 0;

      }
      if (invalidcount == 5)
      {

        ++invalidcount;
        torture1();

      }
      if (invalidcount == 8)
      {
        torture2();
      }

    }
    // LOOP ENDS!!!//
  }

  //********OPEN THE DOOR FUNCTION!!!!***********//

  void unlockdoor()
  {
    delay(900);
    unlockbuzz();

    for (pos = 180; pos >= 0; pos -= 5) // goes from 180 degrees to 0 degrees
    {
      myservo.write(pos); // tell servo to go to position in variable 'pos'
      delay(5); // waits 15ms for the servo to reach the position
    }
    delay(2000);



    delay(1000);
    counterbeep();
    delay(1000);
    for (pos = 0; pos <= 180; pos += 5) // goes from 0 degrees to 180 degrees
    { // in steps of 1 degree
      myservo.write(pos); // tell servo to go to position in variable 'pos'
      delay(15);

      currentposition = 0;

    }
  }

  //************WRONG CODE FUNCTION********//

  void incorrect()
  {
    delay(500);
    digitalWrite(redled, HIGH);
    digitalWrite(buzz, HIGH);
    delay(3000);
    digitalWrite(redled, LOW);
    digitalWrite(buzz, LOW);
  }
  //**************KEYPRESS********************//
  void keypress()
  {
    digitalWrite(buzz, HIGH);
    delay(50);
    digitalWrite(buzz, LOW);
  }
  //*************** ARM SERVO***********//
  void armservo()
  {

    for (pos = 180; pos <= 180; pos += 50)
    {
      myservo.write(pos);
      delay(5);
    }
    delay(5000);

    for (pos = 180; pos >= 0; pos -= 50)
    {
      myservo.write(pos);
    }

  }
  //**********UNLOCK BUZZ*************//
  void unlockbuzz()
  {
    digitalWrite(buzz, HIGH);
    delay(80);
    digitalWrite(buzz, LOW);
    delay(80);
    digitalWrite(buzz, HIGH);
    delay(80);
    digitalWrite(buzz, LOW);
    delay(200);
    digitalWrite(buzz, HIGH);
    delay(80);
    digitalWrite(buzz, LOW);
    delay(80);
    digitalWrite(buzz, HIGH);
    delay(80);
    digitalWrite(buzz, LOW);
    delay(80);
  }

  //**********COUNTER BEEP**********//
  void counterbeep()
  {
    delay(1200);
    digitalWrite(buzz, HIGH);
    digitalWrite(buzz, LOW);
    delay(1000);
    //2
    digitalWrite(buzz, HIGH);
    digitalWrite(buzz, LOW);
    delay(1000);
    //3
    digitalWrite(buzz, HIGH);
    digitalWrite(buzz, LOW);
    delay(1000);
    //4
    digitalWrite(buzz, HIGH);
    digitalWrite(buzz, LOW);
    delay(1000);
    //
    digitalWrite(buzz, HIGH);
    digitalWrite(buzz, LOW);
    delay(1000);
    //5
    digitalWrite(buzz, HIGH);
    delay(40);
    digitalWrite(buzz, LOW);
    delay(40);
    digitalWrite(buzz, HIGH);
    delay(40);
    digitalWrite(buzz, LOW);
    delay(40);
    digitalWrite(buzz, HIGH);
    delay(40);
    digitalWrite(buzz, LOW);
    delay(40);
    digitalWrite(buzz, HIGH);
    delay(40);
    digitalWrite(buzz, LOW);
  }
  //*********TORTURE1***********//
  void torture1()
  {
    delay(1000);
    digitalWrite(buzz, HIGH);
    delay(15000);
    digitalWrite(buzz, LOW);

  }
  //*****TORTURE2*****//
  void torture2()
  {
    delay(1000);
    digitalWrite(buzz, HIGH);
    delay(55000);
    counterbeep();
    digitalWrite(buzz, LOW);
  }